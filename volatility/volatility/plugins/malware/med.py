import os
import volatility.utils as utils
import volatility.debug as debug
import volatility.plugins.vadinfo as vadinfo
from volatility.plugins.malware import malfind
from volatility.plugins.malware.gargoyle import gargoyle

#--------------------------------------------------------------------------------
# MED
#--------------------------------------------------------------------------------

class MED(vadinfo.VADDump):
    "Find detection evasion injections"

    def __init__(self, config, *args, **kwargs):
        vadinfo.VADDump.__init__(self, config, *args, **kwargs)
        config.remove_option("BASE")
        config.add_option('SCANNERS', short_option = 's', default = None,
                          help = 'Run these detection scanners (comma-separated)',
                          action = 'store', type = 'str')

    def render_text(self, outfd, data):
        if self._config.DUMP_DIR and not os.path.isdir(self._config.DUMP_DIR):
            debug.error(self._config.DUMP_DIR + " is not a directory")
        
        for result in gargoyle(self._config).calculate():
            for task in data:
                if task.UniqueProcessId != result.process.UniqueProcessId:
                    continue
                
                for vad, address_space in task.get_vads():
                    if (result.probablePayload < vad.Start or 
                        result.probablePayload > vad.End):
                        continue
                    
                    content = address_space.zread(result.probablePayload, 64) 
                    
                    outfd.write("Process: {0} Pid: {1} Address: {2:#x}\n".format(
                        result.process.ImageFileName, result.process.UniqueProcessId, vad.Start))

                    outfd.write("Vad Tag: {0} Protection: {1}\n".format(
                        vad.Tag, vadinfo.PROTECT_FLAGS.get(vad.VadFlags.Protection.v(), "")))

                    outfd.write("Flags: {0}\n".format(str(vad.VadFlags)))
                    outfd.write("\n")

                    # this is for address reporting in the output 
                    data_start = vad.Start
                    
                    outfd.write("{0}\n".format("\n".join(
                        ["{0:#018x}  {1:<48}  {2}".format(data_start + o, h, ''.join(c))
                        for o, h, c in utils.Hexdump(content)
                        ])))

                    outfd.write("\n")
                    outfd.write("\n".join(
                        ["{0:#018x} {1:<16} {2}".format(o, h, i)
                        for o, i, h in malfind.Disassemble(content, data_start)
                        ]))

                    # Dump the data if --dump-dir was supplied
                    if self._config.DUMP_DIR:

                        filename = os.path.join(self._config.DUMP_DIR,
                            "process.{0}.{1:#x}.dmp".format(
                            result.process.UniqueProcessId, vad.Start))

                        self.dump_vad(filename, vad, address_space)

                    outfd.write("\n\n")
